               ------------------------------------------------
                                    ECC201

                                    Lab 05

                              Abstract Data Types
               ------------------------------------------------
               
          Solve the following exercises during today's lab practice.

                  See the following page for additional help:

                https://docs.python.org/2/library/operator.html

                                      <>

1) Complete the Set ADT by implementing intersect(), difference(), and
   symmetric_difference().


2) Modify the Set() constructor to accept an optional variable argument to
   which a collection of initial values can be passed to initialize the set.
   The prototype for the new constructor should look as follows:

      def Set( self, *initElements = None )

   It can then be used as shown here to create a set initialized with the given
   values:

      s = Set( 150, 75, 23, 86, 49 )

3) Add a new operation to the Set ADT to test for a proper subset. Given two
   sets, A and B, A is a proper subset of B, if A is a subset of B and A does
   not equal B.


4) Add the str() method to the Set implementation to allow a user to print
   the contents of the set. The resulting string should look similar to that of
   a list, except you are to use curly braces to surround the elements.


5) Add Python operator methods to the Set class that can be used to perform
   similar operations to those already defined by named methods:

   Operator Method   Syntactic Sugar  Current Method

   __add( setB )__   self + setB      union( setB )
   __mul( setB )__   self * setB      interset( setB )
   __sub( setB )__   self - setB      difference( setB )
   __xor( setB )__   self ^ setB      symmetric_difference( setB )
   __lt( setB )__    self < setB      isSubsetOf( setB )

   Therefore, we will no longer need to call union() or other methods listed
   above directly. Instead, we will use the convenient operators that will be
   mapped to these methods instead. For example, we will not need to do

      sa = Set()
      sb = Set()
      .
      .
      .
      su = sa.union( sb )

   Instead, we will do

      sa = Set()
      sb = Set()
      .
      .
      .
      su = sa + sb


   To compute symmetric difference, we will do

      sd = sa ^ sb

   or

      sd = sb ^ sa

   (Both operations should return the identical result.)


                                 <End of Lab>

